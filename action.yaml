name: Create AWS static website
description: Creates an AWS static website and uploads the IAM user keys to 1password

inputs:
  aws-account-name:
    description: The name of the AWS account used for the site
    required: true
  aws-assume-role-deploy:
    description: The AWS role used to deploy the site
    required: true
  aws-assume-role-dns:
    description: The AWS role used to deploy DNS
    required: true
  aws-profile-name:
    description: The name of the AWS profile used for site permissions
    required: true
  debug-using-tmate:
    description: Whether or not to use the TMATE server for debugging on a run failure
    required: false
    default: "false"
  github-token:
    description: The value of the GITHUB_TOKEN variable generated for each workflow
    required: true
  global-accelerator-source:
    description: The source for the Global Accelerator if used (i.e., tamu.edu)
    required: false
    default: ""
  global-accelerator-target:
    description: The target for the Global Accelerator if used (i.e., www.tamu.edu)
    required: false
    default: ""
  rewrite-rules-repo:
    description: The raws GitHub URL of the rewrite rules repository 
    required: true

runs:
  using: composite
  steps:
    - name: Checkout base repo
      uses: actions/checkout@v3

    - name: Checkout actions repo
      uses: actions/checkout@v3
      with:
        repository: Marketing-and-Communications/vpasc-vpmc-actions-aws-static-site
        path: action

    - name: Modify git configuration
      shell: bash
      run: |
          git config --global user.email "actions-bot@tamu.edu"
          git config --global user.name "Actions Bot"

    - name: Get the environment based on the target branch for a PR or push
      shell: bash
      run: |
        if [ ! -z "${GITHUB_BASE_REF}" ]
        then
          ENV=${GITHUB_BASE_REF}
        else
          ENV=${GITHUB_REF#refs/heads/}
        fi
        echo "ENV=${ENV}" >> $GITHUB_ENV

    - name: Checkout bootstrap state branch (which may not exist yet)
      uses: actions/checkout@v3
      # Always succeed since the branch may not yet exist
      continue-on-error: true
      with:
        ref: ${{ env.ENV }}-tfstate
        path: tfstate

    - name: Copy the bootstrap state file to the correct location if it exists
      shell: bash
      run: |
        if [ -f ./tfstate/terraform.tfstate ]
        then
          cp ./tfstate/terraform.tfstate ./terraform/stacks/backend/${ENV}/terraform.tfstate
        fi

    - name: Get the OIDC token for use in the terraform AWS providers
      shell: bash
      run: |
        export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/aws_oidc_token
        echo "AWS_WEB_IDENTITY_TOKEN_FILE=${AWS_WEB_IDENTITY_TOKEN_FILE}" >> $GITHUB_ENV
        curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=sts.amazonaws.com" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE

    - name: Configure AWS Credentials that will be used for the S3 backend (since it doesn't support OIDC directly)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-east-1
        role-to-assume: ${{ inputs.aws-assume-role-deploy }}
        role-session-name: S3BackendSession

    - name: Get terraform and terramate version
      shell: bash
      run: |
        TF_VERSION=$(cat ./terraform/globals.tm.hcl | grep 'terraform_version' | tr ' ' '\n' | sed -e 's/"//g' | egrep '[0-9]\..*' | tr -d '\n')
        TM_VERSION=$(cat ./config.tm.hcl | grep required_version | tr ' ' '\n' | sed -e 's/"//g' | egrep '[0-9]\..*' | tr -d '\n')
        echo "TF_VERSION=${TF_VERSION}" >> $GITHUB_ENV
        echo "TM_VERSION=${TM_VERSION}" >> $GITHUB_ENV

    - name: Set up terramate environment variables
      shell: bash
      env:
        AWS_ACCOUNT_NAME: ${{ inputs.aws-account-name }}
        AWS_PROFILE_NAME: ${{ inputs.aws-profile-name }}
        REWRITE_RULES_REPO: ${{ inputs.rewrite-rules-repo }}
        AWS_ASSUME_ROLE_DEPLOY: ${{ inputs.aws-assume-role-deploy }}
        AWS_ASSUME_ROLE_DNS: ${{ inputs.aws-assume-role-dns }}
        GLOBAL_ACCELERATOR_SOURCE: ${{ inputs.global-accelerator-source }}
        GLOBAL_ACCELERATOR_TARGET: ${{ inputs.global-accelerator-target }}
      run: |
        echo "TM_VAR_aws_account_name_${ENV}=${AWS_ACCOUNT_NAME}" >> $GITHUB_ENV
        echo "TM_VAR_aws_profile_name_${ENV}=${AWS_PROFILE_NAME}" >> $GITHUB_ENV
        echo "TM_VAR_rewrite_rules_repo=${REWRITE_RULES_REPO}" >> $GITHUB_ENV
        echo "TM_VAR_oidc_token_file=${AWS_WEB_IDENTITY_TOKEN_FILE}" >> $GITHUB_ENV
        echo "TM_VAR_aws_role_deploy=${AWS_ASSUME_ROLE_DEPLOY}" >> $GITHUB_ENV
        echo "TM_VAR_aws_role_dns=${AWS_ASSUME_ROLE_DNS}" >> $GITHUB_ENV
        echo "TM_VAR_global_accelerator_source_${ENV}=${GLOBAL_ACCELERATOR_SOURCE}" >> $GITHUB_ENV
        echo "TM_VAR_global_accelerator_target_${ENV}=${GLOBAL_ACCELERATOR_TARGET}" >> $GITHUB_ENV

    - name: Install terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: "1.20"

    - name: Install terramate
      shell: bash
      run: go install github.com/mineiros-io/terramate/cmd/terramate@v${TM_VERSION}

    - name: Run terramate generate
      shell: bash
      run: |
        terramate generate

    # This will bootstrap the remote state resources (i.e., S3 bucket and DynamoDB table) so that
    # the other stacks will be able to use the S3 remote state backend
    - name: Run terramate init and apply for the backend (the other stacks can't init without this)
      shell: bash
      run: |
        terramate run --tags=backend:${ENV} terraform init && \
        terramate run --tags=backend:${ENV} terraform apply -auto-approve

    # Since we are creating the remote state resources with terraform, that state file
    # will have to be local, but we don't want to lose it. We keep it by checking it into
    # its own branch, {env}-tfstate (i.e., dev-tfstate, staging-tfstate, prod-tfstate)
    # This is ok because there is nothing sensitive in the bootstrap state file
    - name: Check in the backend state to the state branch (because the backend bootstraps remote state)
      shell: bash
      run: |
        if [ ! -d ./tfstate ]
        then
          mkdir ./tfstate
        fi

        STATE_BRANCH=${ENV}-tfstate
        cd ./tfstate

        # If the state branch doesn't exist, then create it
        if ! git branch -r | grep "origin/${STATE_BRANCH}"
        then
          git checkout -b $STATE_BRANCH
        fi

        cp ../terraform/stacks/backend/${ENV}/terraform.tfstate ./

        git add terraform.tfstate
        git commit -m "Add/update backend bootstrap terraform state file"
        git push --set-upstream origin $STATE_BRANCH

    # Write the S3 backend configuration file for both stacks. We do this to avoid 
    # passing them in on the command line because the backend values differ between 
    # the pre-site DNS setup stack, and the site deployment stack
    - name: Write S3 backend configuration files
      shell: bash
      env:
        AWS_ACCOUNT_NAME: ${{ inputs.aws-account-name }}
      run: |
        ROUTE53_DOMAIN=$(cat ./site_settings.yaml | grep route53_domain | cut -d: -f2 | sed -e 's/ //g' -e 's/"//g')
        cat <<EOF > ./terraform/stacks/pre-site/backend.hcl
          key = "${ROUTE53_DOMAIN}/terraform.tfstate"
        EOF
        cat <<EOF > ./terraform/stacks/site/${ENV}/backend.hcl
          bucket = "${AWS_ACCOUNT_NAME}-website-${ENV}-tf"
          dynamodb_table = "${AWS_ACCOUNT_NAME}-website-${ENV}-tf"
        EOF

    # We have to run this stack separately in the workflow because it uses the aip-shared-services AWS account
    # for its S3 state backend, and we have no way to make the S3 state use OIDC directly. So instead,
    # we assume the appropriate role using OIDC, run the pre-site stack, then assume the OIDC role needed for the
    # site stack S3 state backend. NASTY
    - name: Configure AWS Credentials that will be used for the pre-site S3 backend (for common DNS setup)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-east-1
        role-to-assume: ${{ inputs.aws-assume-role-dns }}
        role-session-name: S3PreSiteBackendSession
    # All environments (i.e., dev, staging, prod) run the same pre-site stack, 
    # because they all share the same site DNS zone. It's possible that any 
    # environment branch could be the first one to run, so we need to run the
    # pre-site setup for each environment. Since they could potentially run at the 
    # same time, we let the plan wait up to 5 minutes to acquire a state lock.
    - name: Run terraform init and apply for the pre-site stack
      shell: bash
      run: |
        terramate run --tags=pre-site:${ENV} terraform init -backend-config=./backend.hcl && \
        terramate run --tags=pre-site:${ENV} terraform apply -auto-approve -lock-timeout=5m

    - name: Fetch credentials for creating and using the 1password connect server from AWS
      shell: bash
      run: |
        echo -e $(aws secretsmanager get-secret-value --secret-id "1password/it-svc-aws-static-sites/api" \
          --query 'SecretString' --output text | jq -r '."1password-credentials.json"') > ./action/1password/1password-credentials.json
        
        OP_CONNECT_TOKEN=$(aws secretsmanager get-secret-value --secret-id "1password/it-svc-aws-static-sites/api" \
          --query 'SecretString' --output text | jq -r '."1password-access-token"')

        # Mark this as sensitive
        echo "::add-mask::$OP_CONNECT_TOKEN"
        echo "OP_CONNECT_TOKEN=${OP_CONNECT_TOKEN}" >> $GITHUB_ENV 

    - name: Start the local 1password connect server to enable API access for terraform
      shell: bash
      working-directory: ./action/1password
      run: docker compose up -d

    - name: Configure AWS Credentials that will be used for site S3 backend (site deployment)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-east-1
        role-to-assume: ${{ inputs.aws-assume-role-deploy }}
        role-session-name: S3SiteBackendSession

    - name: Run terraform init
      shell: bash
      id: tfinit
      run: terramate run --tags=site-only:${ENV} terraform init -backend-config=./backend.hcl

    - name: Post terraform init
      if: ${{ github.event_name == 'pull_request' }}
      uses: tamu-edu/it-ae-actions-terraform-pr-commenter@v2
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        commenter_type: init
        commenter_input: ${{ format('{0}{1}', steps.tfinit.outputs.stdout, steps.tfinit.outputs.stderr) }}
        commenter_exitcode: ${{ steps.tfinit.outputs.exitcode }}

    - name: Run terraform plan
      shell: bash
      id: tfplan
      run: terramate run --tags=site-only:${ENV} terraform plan

    - name: Post terraform plan
      if: ${{ github.event_name == 'pull_request' }}
      uses: tamu-edu/it-ae-actions-terraform-pr-commenter@v2
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.tfplan.outputs.stdout, steps.tfplan.outputs.stderr) }}
        commenter_exitcode: ${{ steps.tfplan.outputs.exitcode }}

    - name: Run terraform apply (only if doing CD)
      shell: bash
      if: ${{ github.event_name == 'push' }}
      id: tfapply
      run: terramate run --tags=site-only:${ENV} terraform apply -auto-approve

    - name: Create Issue for a failed deployment
      if: ${{ failure() && github.event_name == 'push' }}
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ github.token }}
        title: Action workflow failed.
        body: |
          ### Context
          [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
          Workflow name - `${{ github.workflow }}`
          Job -           `${{ github.job }}`
          status -        `${{ job.status }}`

    - name: Debug with TMATE if the TMATE environment variable is set to "true" and something failed
      if: ${{ failure() && inputs.debug-using-tmate == 'true' }}
      uses: mxschmitt/action-tmate@v3

    - name: Stop the local 1password connect server
      shell: bash
      if: always()
      working-directory: ./action/1password
      run: docker compose down